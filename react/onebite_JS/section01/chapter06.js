// 1. 묵시적 형 변환
// -> 자바스크립트 엔진이 알아서 형 변환 하는것

let num = 10;
let str = "20";

const result = num + str;
console.log(result)     // 1020이 출력됨
// 변수 num에 저장된 숫자 값이 덧셈 과정에서 묵시적으로 String 타입으로 형변환이 일어남
// 결과적으로 result에 문자열 10과 문자열 20이 더해진 값인 1020이 출력됨
// 숫자와 문자열을 더하는 불가능한 연산을 작성하게 되면 JS 엔진이 오류를 발생시키지 않기 위해 숫자를 문자열로 암묵적으로 형을 변환함
// But. 모든 불가능한 연산에서 묵시적 변환이 잘 일어나지는 X
// -> 특정 하나의 변수 값만 형변환 했을 때 오류가 발생하지 않고 연산이 잘 종료될 수 있는 경우에만 묵시적 형변환이 일어남


// 2. 명시적 형 변환
// -> 프로그래머 내장함수 등을 이용해서 직접 형 변환을 명시
// -> 문자열 -> 숫자
let str1 = "10";
let strToNum1 = Number(str1);   // Number라는 내장함수를 호출해 문자열을 숫자값으로 변환해줌
console.log(10 + strToNum1);    // 20

// 문자열 안에 숫자 외의 다른 문자열 값이 포함되어 있는 경우 위와 같은 방식의 형변환이 잘 안됨
let str2 = "10개";
// let strToNum2 = Number(str2);
// console.log(strToNum2);    // NaN -> 수치 연산 실패
// 위와 같은 경우 Number 내장함수가 아닌 parseInt라는 내장함수를 사용

// 숫자 값이 아닌 값을 포함하고 있는 문자열도 숫자값으로 잘 변환해줌
let strToNum2 = parseInt(str2);
// 주의! 문자가 앞에 있는 경우 (ex) str2 = "asef10개") 형변환이 잘 일어나지 않을 수 있음 (숫자가 앞쪽으로 나와 있어야 함)


// -> 숫자 -> 문자열
let num1 = 20;
let numToStr1 = String(num1);   // 숫자 20이 문자열 "20"으로 형변환 됨

console.log(numToStr1 + "입니다");  // 20입니다
// 두 값 모두 문자열이기 때문에 이어져서 출력됨
