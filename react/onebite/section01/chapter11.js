// 함수
// function 함수명(매개변수명) { 함수내용 }
// 함수는 선언했다고 바로 실행되는 것이 아니라 함수의 이름을 불러서 함수를 호출했을 때만 실행됨
// 함수 선언 : 함수가 호출되었을 때 어떤 코드들을 실행할 것인지 미리 준비해두는 작업
// 주의! 함수를 호출할 때에는 반드시 소괄호를 함께 작성해 줘야함 (매개변수가 없는경우에도 greeting() 이런 식으로 호출해야 함)
// 함수가 호출되면 코드의 실행흐름이 함수 내부로 넘어감
let area1 = getArea(10, 20);  // 함수 반환값을 변수에 담아 활용 가능
console.log(area1);

let area2 = getArea(30, 20);
console.log(area2);

getArea(120, 200);  // 함수를 호출하면서 함수에게 전달한 값 들 -> 인수
// 전달된 인수들을 순서대로 저장하는 함수의 변수들을 매개변수라고 함

// 호이스팅
// -> 끌어올리다 라는 뜻
function getArea(width, height) { // 직사각형의 넓이를 구하는 함수
  function another() {  // JS는 함수 내부에 또 다른 함수를 만들 수 있다.
    // 중첩 함수
    console.log("another");
  }

  another();
  let area = width * height;

  return area;
}
// 함수 안에서 return이라는 키워드를 사용하게 되면, 함수는 return 이후에 작성된 값(area)을 반환하게 됨 -> 이 값을 반환값이라고 부름
// 반환값은 곧 함수 호출의 결과값
// return문을 활용하면 함수가 어떠한 결과값을 반환하도록 만들어 줄 수 있다.
// 참고: 함수가 return문을 만나게 되면 값을 반환하고 바로 종료되기 때문에 return문 밑에 코드를 추가적으로 작성해도 코드는 실질적으로 수행되지 않음
// 참고: 자바스크립트는 함수 안에 또 다른 함수를 선언하는 것도 가능 == 중첩 함수

// 자바스크립트에서는 함수의 선언을 함수 호출보다 아래에 두어도 아무런 문제없이 잘 수행됨 -> Why? JavaScript의 호이스팅이라는 기능 때문
// 호이스팅 : 코드의 밑바닥에 작성된 선언문들을 해당 코드가 실행되기 전에 최상단으로 끌어올려서 실행 시켜주는 기능
// 따라서 선언문을 호출문보다 아래에 두어도 내부적으로 알아서 호이스팅 되어 끌어올려져 실행되기 때문에 아무런 문제가 발생하지 않음
// + 호이스팅 덕분에 함수 선언이 무조건 위에 있지 않아도 되기 때문에 좀 더 유연하게 프로그래밍을 진행할 수 있다는 장점 존재