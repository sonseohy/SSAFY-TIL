// 1. 상수 객체
// 상수에 저장해 놓은 객체
/// 상수에 저장된 객체도 프로퍼티를 추가, 수정, 삭제가 가능
// 가능한 이유?
// - 상수라는 건 엄밀히 말하면 새로운 값을 할당하지 못하는 변수
// - animal = 123; 이런 식으로 아예 새로운 값을 할당해버리는 것은 문제가 되지만
// - 반면 저장되어 있는 객체 값의 프로퍼티를 수정하는 건 아무런 문제가 되지 않음
// - 따라서 상수에 객체를 보관한다고 하더라도 프로퍼티를 추가, 수정, 삭제하는 조작은 얼마든지 가능하다.
const animal = {
  type: "고양이",
  name: "나비",
  color: "black",
};

// 상수 객체에 새로운 프로퍼티를 추가하거나 기존 객체에 들어있던 프로퍼티 값을 수정하거나, 삭제하는 행위는 가능함
animal.age = 2; // 추가
animal.name = "까망이"; // 수정
delete animal.color; // 삭제


// 2. 메서드
// -> 객체 프로퍼티들 중 값이 함수인 프로퍼티를 말함
// 메서드는 익명함수로 만드는 것도 가능하고 화살표 함수로 만드는 것도 가능
const person = {
  name: "이정환",
  // 화살표 함수 방식
  // sayHi: () => {
  //    console.log("안녕");
  //  }
  // 메서드 선언
  // 화살표 함수보다 더 단축된 아래와 같은 형태로도 만들 수 있음 -> 아래와 같은 방식을 메서드 선언이라고 함
  sayHi() {
    console.log("안녕!");
  },
};

person.sayHi(); // 메서드는 함수이기 때문에 호출하는 것도 가능
person["sayHi"]();  // 괄호 표기법을 이용해 호출 가능

// 메서드는 보통 객체의 동작을 정의하는 데에 사용됨
// 함수가 아닌 프로퍼티들이 이 객체의 정보를 갖고 있다면 함수 프로퍼티들은 메서드로써 객체의 동작을 정의한다.
