// 1. 대입 연산자
// 변수에 값을 저장할 때 사용하는 가장 기초적인 연산자
// (변수명) = 저장할 값;
// equal sign, '=' 기호가 대입 연산자
let var1 = 1;

// 2. 산술 연산자
// 덧셈, 뺄셈, 곱셈, 나눗셈, 나머지를 구하는 모듈러 연산을 하는 아래 다섯가지의 연산자들을 산술 연산자라고 부름
// 곱셈, 나눗셈, 모듈러 연산자가 덧셈, 뺄셈보다 우선순위 높음
let num1 = 3 + 2;   // 덧셈
let num2 = 3 - 2;   // 뺄셈
let num3 = 3 * 2;   // 곱셈
let num4 = 3 / 2;   // 나눗셈
let num5 = 3 % 2;   // 나머지

// let num6 = 1 + 2 * 10;   // 21
// 우선순위가 낮은 연산을 먼저 수행시키고 싶을 때 소괄호로 묶어주면 됨
let num6 = (1 + 2) * 10;
console.log(num6);  // 30

// 3. 복합 대입 연산자
// 산술 연산자 + 대입 연산자가 복합되어 있음
// 복합 대입 연산자를 사용하면 산술 연산자와 대입 연산자를 한꺼번에 이용할 수 있음
let num7 = 10;
num7 += 20; // 30, num7의 기존 값에 20을 더한 것으로 다시 할당하라는 뜻 (num7 = num7 + 20)
num7 -= 20; // num7 = num7 - 20
num7 *= 20; // num7 = num7 * 20
num7 /= 20; // num7 = num7 / 20
num7 %= 10; // num7 = num7 % 20

// 4. 증감 연산자
// 값을 1씩 늘리거나 또는 1씩 줄일 때 쓰는 연산자
let num8 = 10;
++num8; // 전위 연산 : +1 연산이 즉시 이루어짐
num8++; // 후위 연산 : 해당 줄이 끝나고 나서 +1
// 해당 라인에서 바로 증감이 됐으면 좋겠다하면 변수명 앞에 ++ (전위 연산자 사용)
// let num8 = 10;
// console.log(num8++); // 10 출력 후 num8 값이 11이 됨
// let num8 = 10;
// console.log(++num8); // 11 출력


// 5. 논리 연산자
// Boolean 타입의 값, 즉 True와 False만 저장하는 타입의 값을 다룰 때 사용하는 연산자
// or 연산자(||) : 값이 하나만 참이어도 참
let or = true || false;

// and 연산자(&&) : 양쪽 모두 참이어야만 참
let and = true && false;

// not 연산자(!) : 참이면 거짓, 거짓이면 참
let not = !true;

// 6. 비교 연산자
// 두 개의 값을 서로 비교하는 연산자

// 동등 비교 연산자(===) : 두 값이 같은 값인지 비교
let comp1 = 1 === "1";
console.log(comp1);     // false
// 비동등 비교 연산자(!==) : 두 개의 값이 서로 같지 않은지 비교
let comp2 = 1 !== 2;
// 왜 = 연산자를 3번이나 쓸까?
// 두 개만 써도 가능은 함, 비교는 똑같이 이루어지지만 값의 자료형까지 같은지는 비교가 안됨
// console.log(1 == "1");은 true가 나와버림 -> 값 자체로만 비교하기 때문에
// JavaScript 에서는 = 세 개를 써서 비교하는 게 더 권장되는 방식

// 두 값의 대소 비교 : 미만, 초과
let comp3 = 2 > 1;
let comp4 = 2 < 1;

// 두 값의 대소 비교 : 이상, 이하
let comp5 = 2 >= 2;
let comp6 = 2 <= 2;
