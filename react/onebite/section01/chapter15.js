// 1. 객체 생성
// 객체 : 여러가지 값을 동시에 저장할 수 있는 자료형을 의미

// 객체 생성 방식 2가지
let obj1 = new Object(); // 객체 생성자
let obj2 = {}; // 객체 리터럴 (대부분 사용)

// 2. 객체 프로퍼티 (객체 속성) : name, age, hobby와 같은 객체의 정보 값을 객체 프로퍼티 또는 객체 속성이라고 부름
// 프로퍼티들은 객체의 실질적인 정보를 담고 있는 역할을 함
// 콜론을 기준으로 왼쪽에는 프로퍼티의 이름 역할을 하는 키를 적고, 오른쪽에는 프로퍼티의 값인 value를 적는다.
// 프로퍼티의 개수에는 제한이 없으며, value에 들어올 수 있는 자료형의 타입도 제한 없음 -> 문자열, 숫자, 배열, 객체, 함수 모두 가능
// 프로퍼티의 키 값으로는 문자열이나 숫자만 이용할 수 있다.
// 특별히 객체 프로퍼티의 키로 사용되는 name, age 같은 문자열은 따옴표를 붙이지 않아도 되지만 띄어쓰기가 포함된 문자열을 키로 사용하고자 한다면 따옴표로 감싸주어야함
let person = {
  name: "이정환",
  age: 27,
  hobby: "테니스",
  job: "FE Developer",
  extra: {},
  10: 20,
  "like cat": true,
};

// 3. 객체 프로퍼티를 다루는 방법
// 3.1 특정 프로퍼티에 접근 (점 표기법, 괄호 표기법)
// 점 표기법 : 객체 이름 뒤에 점을 찍고, 접근하고자 하는 프로퍼티의 키를 적는 형식
// let name = person.name2;와 같이 존재하지 않는 프로퍼티 값을 꺼내려고 하면 오류가 발생하지 않고 undefined가 반환됨
let name = person.name;
console.log(name);  // 이정환 (name에 밑줄이 그어지는 이유? 타입스크립트와 관련된 경고사항, vs코드의 기본 기능)
// 괄호 표기법 : 객체 이름 뒤에 대괄호를 써준 다음 대괄호 안에 따옴표를 이용해 문자열로 접근하고자 하는 프로퍼티의 키 값을 명시하는 방법
// 주의! 프로퍼티의 키를 반드시 쌍따옴표로 문자열 형식으로 작성해야 함 (쌍따옴표 없이 작성하면 작성한 키를 변수로 인식해 오류 발생)
// 괄호 표기법도 존재하지 않는 프로퍼티에 접근하려고 하면 undefined를 반환
let age = person["age2"];

let property = "hobby";
let hobby = person[property]; // person 객체에서 변수 property의 값인 "hobby"를 꺼내와 person의 키 값으로 사용해 값을 꺼내오는 이러한 방식도 가능
// 괄호 표기법에서는 변수에 접근하고자 하는 키 값을 담아 프로퍼티를 꺼내오도록 설정 가능
// -> 동적으로 프로퍼티를 변화시키면서 꺼내와야 할 때 괄호 표기법이 유용
// -> 그게 아니라면 문법이 훨씬 간결한 점 표기법 이용하는게 좋음



// 3.2 새로운 프로퍼티를 추가하는 방법
// 괄호 표기법이나 점 표기법 사용
person.job = "fe developer";
person["favoriteFood"] = "떡볶이";

// 3.3 프로퍼티를 수정하는 방법
// 추가하는 방법과 동일 -> 점 표기법, 괄호 표기법 사용
person.job = "educator";
person["favoriteFood"] = "초콜릿";

// 3.4 프로퍼티를 삭제하는 방법
// 'delete'라는 특별한 연산자 이용
// delete 연산자 뒤에 삭제하고자 하는 프로퍼티 작성 (점 표기법, 괄호 표기법으로)
delete person.job;
delete person["favoriteFood"];

// 3.5 프로퍼티의 존재 유무를 확인하는 방법 (in 연산자)
// 'in'이라는 독특한 연산자 이용
// 존재하면 true, 존재하지 않으면 false 반환
let result1 = "name" in person; // in 연산자는 name이라는 property가 오른쪽에 있는 객체 안에 있느냐 없느냐를 물어보는 연산자자
let result2 = "cat" in person;
console.log(result1); // true
console.log(result2); // false
