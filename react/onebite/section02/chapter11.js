// 동기
// 여러 개의 작업이 있을 때 작업들을 순서대로 한 번에 하나씩만 처리하는 방식을 동기적으로 처리한다고 표현
// 참고 : 작업을 직접 실행하고 처리해주는 역할을 하는 것을 프로그래밍에서는 Thread라고 부름
// 자바스크립트 엔진은 특별한 함수를 사용해서 코드를 비동기적으로 동작하도록 설정한 게 아니라면 기본적으로는 모든 코드가 동기적으로 실행됨
// 장점 : 모든 코드를 순서대로, 즉 동기적으로 실행시켜 주기 때문에 작성한 프로그램의 실행 흐름을 읽을 때 그냥 위에서부터 아래로 실행된다라고 생각하면 되니까 실행 흐름을 파악하기 쉽고 용이하다는 장점이 있음
// 단점 : 어떤 하나의 작업이 아주 오래걸리는 작업이라면 그때는 해당 Thread가 그 작업을 다 처리하기 전까지는 다음 작업을 진행할 수 없음 -> 결국 전체 프로그램의 성능이 악화되어 버리는 치명적 문제 발생
// 위 단점을 해결하기 위해 자바나 C#의 경우 여러 개의 스레드를 동시에 사용하는 멀티스레드 기법을 활용
// 멀티스레드, 즉 여러 개의 스레드를 활용하면 오래걸리는 작업이 중간에 포함되어 있다고 하더라도 해당 작업이 전체 프로그램의 성능을 악화시키는 데에는 별로 큰 영향을 주지 못하기 때문에 동기 방식의 단점을 어느정도는 보완할 수 있음
// But. 자바스크립트 엔진에는 쓰레드가 1개밖에 없음 -> 멀티스레드 방식으로는 문제 해결 불가, 자바스크립트에서는 이런 문제를 비동기라는 방식을 통해 해결

// 비동기
// 동기적이지 않다는 뜻으로 작업을 순서대로 처리하지 않는 방식
// 여러 개의 작업이 주어졌을 때 앞선 작업이 종료되지 않아도 기다릴 필요 ㅇ벗이 다른 작업을 동시에 진행시키는게 가능함 -> 동기 방식의 단점을 어느정도 보완할 수 있음
// 각각의 작업이 종료되었을 때 해당 작업의 결과 값을 이용해서 또 다른 동작을 수행시켜줘야 한다면 자바스크립트에서는 각각의 작업에 콜백함수를 붙여서 처리해주는 것도 가능함
console.log(1);

// setTimeout : 비동기적으로 작동하는 특수한 내장함수
// - 원하는 코드를 특정 시간이 지난 이후에 비동기적으로 실행시켜주는 기능
// - setTimeout 함수를 호출하면서 첫번째 인수로 콜백 함수를 전달하고 두번째 인수로 3000이라는 숫자 값을 전달
// - 두 번째 인수로 전달한 숫자 값에 해당하는 m/s(밀리세컨즈)만큼 대기했다가 그 시간이 지나면 첫번째 인수로 전달한 콜백 함수를 실행시켜줌
setTimeout(() => {
  console.log(2);
}, 3000); // 3초가 지나면 콜백 함수가 실행되어 console의 2가 뒤늦게 출력됨

console.log(3);

// 스레드가 하나뿐인 자바스크립트가 동시에 여러 개의 작업을 처리할 수 있는 이유는?
// 자바스크립트에서는 setTimeout 함수 같은 비동기 작업들은 자바스크립트 엔진에 있는 스레드가 실행하는 게 아니라 web APIs라는 브라우저가 직접 관리하는 별도의 공간에서 따로 실행되기 때문
// web APIs : 간단히 말해서 웹 브라우저가 직접 관리하는 별도의 영역을 말함 -> 실제로 자바스크립트의 비동기 작업들이 실행되는 영역

// 브라우저에 탑재되어 있는 자바스크립트 엔진은 코드를 한 줄씩 실행하다가 setTimeout과 같은 비동기 함수를 만나게 되면 비동기 작업을 브라우저의 web APIs에게 실행해 달라고 부탁함
// -> 그러면서 타이머가 끝나면 실행할 콜백 함수까지 같이 넘겨줌
// -> 그리고 나서 자바스크립트 엔진은 이 타이머를 기다리지 않고 아래에 있는 작업을 즉시 이어서 실행함
// -> 이후 웹 APIs에 있는 타이머가 완료되면 웹 APIs가 전달 받았던 콜백함수를 다시 자바스크립트 엔진에게 돌려줌
// -> 자바스킙트 엔진에게 콜백 함수를 돌려주게 되면 자바스크립트 엔진은 그제서야 돌려받은 콜백함수를 실행시킴으로써 이러한 방식으로 비동기 처리가 이루어지게 됨

// 자바스크립트 엔진은 web APIs라는 브라우저의 별도 영역 또는 별도 기능을 활용해서 비동기 처리를 진행하기 때문에 스레드가 하나밖에 없음에도 여러 개의 작업을 동시에 처리할 수 있음
