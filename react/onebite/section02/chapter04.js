// 1. Spread 연산자 : ...
// -> Spread : 흩뿌리다, 펼치다 라는 뜻
// -> 객체나 배열에 저장된 여러개의 값을 개별로 흩뿌려주는 역할
// 스프레드 연산자를 이용하면 ...배열이름, ...객체이름과 같이 활용해 배열과 객체의 값을 간편하게 흩뿌릴 수 있음

let arr1 = [1, 2, 3];
// arr1 배열의 값을 arr2의 4와 5 값 사이에 넣고 싶을 때
let arr2 = [4, ...arr1, 5, 6]; // arr1 배열의 모든 요소들을 개별로 풀어 헤치라는 뜻

let obj1 = {
  a: 1,
  b: 2,
};
let obj2 = {
  ...obj1,
  c: 3,
  d: 4,
};
console.log(obj2); // {a: 1, b: 2, c: 3, d: 4}

function funcA(p1, p2, p3) {
  console.log(p1, p2, p3);
}

funcA(...arr1); // 함수를 호출하면서 인수로 arr1 배열의 값을 순서대로 전달하고 싶을 때

// 2. Rest 매개변수
// -> Rest는 나머지 , 나머지 매개변수
// 함수에서 여러 개의 매개변수를 받아야 할 때 배열 형태로 한 번에 매개변수를 받아올 수 있도록 해주는 문법
// ...rest로 한 번에 모든 매개변수를 다 받아올 수 있음
// rest 매개변수를 이용하면 매개변수가 아무리 많이 들어와도 배열에 한 번에 저장해 놓을 수 있어서 편리
function funcB(...rest) {
  // rest 매개변수를 출력해 보면 배열 형태로 전달된 인수들이 다 저장되어 있음
  // 참고로 ...은 매개변수를 정의하는 공간인 소괄호 안에 사용 되었기 때문에 spread 연산자가 아니라 rest 매개변수라는 점을 주의해야함
  console.log(rest); // [1, 2, 3]
}

// 첫번째 매개변수를 다른 이름을 받고 싶으면 추가로 변수명을 따로 빼놓으면 one에는 1이 저장됨
// 참고 : rest 변수의 이름은 ...만 붙이면 되므로 마음대로 설정 가능 (밑의 경우 ds)
function funcB(one, two, ...ds) {
  console.log(ds);
}

funcB(...arr1);

// 주의! rest 매개변수 뒤에는 추가적으로 매개변수를 더 선언할 수 없음
// Why? rest 매개변수는 지금부터 나오는 뒤에 모든 인수들을 다 배열에 저장하기 때문
// 반드시 rest 매개변수가 마지막에 오도록 설정을 해야한다.
